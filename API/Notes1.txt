
Design Patterns : 
S - Single Responsibility Principle (SRP)
O - Open closed Principle  (OSP)
L - Liskov Substitution Principle (LSP)
I - Interface Segregation Principle (ISP)
D - Dependency Inversion Principle (DIP)
    Ioc : Inversion of control : Is the mechanism that allows a high level component to depend on abstraction rather than the concrete implementation of the lower component. is a programming framework that provides automatic DI of the component
- is responsible for
   - Registration : the type of object for specific dependency
   - Resolution : Creating dependency object and injecting into the requesting class( no need to instantiate)
   - Disposition : Manages the lifetime of the dependencies
  
DI - design pattern to inject the concrete impl.of a low level comp. to a high level. Can have 3 appraches
 - Constructor Injection : Instance of the dependency can be passed as an argument to the constructor of the dependent class
- Method Injection: As an argument to the method
- Property Injection: assig instance of dependency to a specific property of the dependent class
 
Web API -  is a concept that solely works on HTTP .RESTful services . It deals with only the data and not the view unlike the MVC 

HTTP Verbs  CRUD
 Get 
 Post
 Put
 Delete

- helps in content negotiation (xml/json/html/text)

.Net framework - 
  EF Entity Framework - orm (object relation mapper)
     Database First Approach - Existing Database
     Code First Approach - No Database. Database gets created thru the .net Application using migrations
     Model First approach - No Database / no code. Constructing database thru models


.Net Core : Is a significant redesign of asp.net to support modern cloud based connected applications, IoT,mobile applications,web applications, ML etc.

- Open Source
- Cross Platform
- CLI Support
- Modular and Leaner
- Built in Dependencies
- Light Weight 
- Modular Http request Pipeline
- Ability to host on multiple servers apart from IIS/Apache/Nginx
- Multiple Editors Supprt (V Studio, VSCode, Sublime,Atom)

Services : Is a component that is intended for common consumption in an application, which can be injected into the constructor/method/properties

Middlewares : Application Components that perform asynchronous calls. They can invoke the next middleware or terminate the request directly. We generally "Use" the middleware. Asp.Net Core comes with rich set of middlewares

UseIIS()
Hosting Model : We have In_process and Out-of-Process.

Kestrel : Cross Platform Web Server, which is a default internal web server.



Core Applications does not have
  - Global.asax
  - web.config
  - Page Life cycle
  - Http Handlers and http Modules


 
