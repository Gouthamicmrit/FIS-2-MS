Asp.Net Core: 

appsettings.json : all application configuration settings viz.
   Files
   User Secrets
   Environmental Variables
   Command Line arguments

launchsettings.json : required for development environ. 
and informs the applications launchtypes i.e. IIS Express,or project

Reverse proxy 

Command Name        Hosting Model        Internal Webserver             External Webserver
  
Project              Ignore Hostings       Only Kestrel         

IIS Express        In Process              Only IIS Built-in Sever

IIS Express        Out-of-process          Kestrel is used                   IIS

IIS                in-process             Only iis web server is used

IIS                out-process             kestrel                           IIS

wwwroot folder : maintains all the static files required for the application (js,css,html,images etc).
                 to server these static files, we have to use app.UseStaticfiles() middleware

Configuring Default pages : index.htm, index,html, default.htm, default.html are the default files that the server would search and render

But if we want custom pages to be the default page, then we use the DefaultFileOptions class object and the add the custom page to the DefaultFileNames property


FileServer() middleware can replace defaultfiles(), staticfiles() and directorybrowser() middlewares

Entity Core : supports 2 approaches
1. Database First
2. Code First


For working with EF Core, we need to install
    1. Microsoft.EntityFrameworkCore
    2. Microsoft.EntityFrameworkCore.Relational
    3. Microsoft.EntityFrameworkCore.SqlServer  ---install, the above 2 packages will et automatically installed
    4. Microsoft.EntityFrameworkCore.Tools (This enables models/context etx to be created in the absence of ADOEntityDataModel wizard)

MVC application : Apart from the above packages, we will need to install 5. Microsoft.EntityFrameworkCore.Design

Life time of DI objects
Scoped : Provides one object to the DI for each request
Transient : provides an object for each service call of the request
SingleTon : creates an object for the first request, and Provides the same  object for subsequent requests





